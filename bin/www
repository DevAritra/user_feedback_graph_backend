#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
const {addRating, getAllRatings, reset} = require('../utils/db');

var debug = require('debug')('real-star:server');
var http = require('http');
const { Socket } = require('socket.io');


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
const io = require('socket.io')(server);

var ratings = [];

io.on('connection', function (socket) {
  socket.emit('total_ratings', ratings);

  console.log('socket joined ' + socket);

  socket.emit('ack', 'Rating submitted');

  // Getting rating data from user 
  socket.on('submit-rating', function (ratingData) {

    console.log('Rating data', ratingData);

    ratings.push(ratingData);
    
    // var obj = JSON.parse(ratingData);

    // var userId = obj['user_id'];
    // var rating = obj['rating'];

    // console.log('userId: ', userId);
    // console.log('rating: ', rating);

    // // Save to local database
    // addRating(userId, rating);

    // Sending data back to web part
    io.emit('total_ratings', ratings);
  });

  socket.on('reset', function () {
    ratings = [];

    // Clear table
    // reset();

    // Update data
    io.emit('total_ratings', ratings);
  });
  // On
  socket.on('disconnect', function () {
    console.log('user has disconnected');
  });

});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
